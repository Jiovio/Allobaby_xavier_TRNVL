import 'package:flutter/material.dart';
import 'dart:async';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';


// Fill in the app ID obtained from the Agora Console
const appId = "a979aa06ad0745b7bba79175e12286ef";
// Fill in the temporary token generated from Agora Console
// const token = "007eJxTYDivEmBj43p967WVLJHWgSvOR/CfLbyp915VY+GhgpLgQxcVGBItzS0TEw3MElMMzE1Mk8yTkhLNLQ3NTVMNjYwszFLT5vvypTcEMjKIl+cxMzJAIIjPwlCSWlzCwAAAG1geUg==";
// // Fill in the channel name you used to generate the token
// const channel = "test";


class Callview extends StatefulWidget {

  String channel;
  String token;


   Callview({super.key,required this.channel, required this.token});

  @override
  State<Callview> createState() => _CallviewState();
}

class _CallviewState extends State<Callview> {

  
int? _remoteUid; // The UID of the remote user
  bool _localUserJoined = false; // Indicates whether the local user has joined the channel
  late RtcEngine _engine; // The RtcEngine instances
  @override
  void initState() {
    super.initState();
    initAgora();
  }
  Future<void> initAgora() async {
    // Get microphone and camera permissions
    await [Permission.microphone, Permission.camera].request();
    // Create RtcEngine instance
    _engine = await createAgoraRtcEngine();
    // Initialize RtcEngine and set the channel profile to live broadcasting
    await _engine.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));
    // Add an event handler
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint('local user ' + connection.localUid.toString() + ' joined');
          setState(() {
            _localUserJoined = true;
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
          setState(() {
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          debugPrint("remote user $remoteUid left channel");
          setState(() {
            _remoteUid = null;
          });
        },
      ),
    );
    // Enable the video module
    await _engine.enableVideo();
    // Enable local video preview
    await _engine.startPreview();
    // Join a channel using a temporary token and channel name
    await _engine.joinChannel(
      token: widget.token,
      channelId: widget.channel,
      options: const ChannelMediaOptions(
        // Automatically subscribe to all video streams
        autoSubscribeVideo: true,
        // Automatically subscribe to all audio streams
        autoSubscribeAudio: true,
        // Publish camera video 
        publishCameraTrack: true,
        // Publish microphone audio 
        publishMicrophoneTrack: true,
        // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
        clientRoleType: ClientRoleType.clientRoleBroadcaster,
        audienceLatencyLevel: AudienceLatencyLevelType.audienceLatencyLevelUltraLowLatency),
      uid: 0, // When you set uid to 0, a user name is randomly generated by the engine
    );
  }
  @override
  void dispose() {
    super.dispose();
    _dispose();
  }
  Future<void> _dispose() async {
    // Leave the channel
    await _engine.leaveChannel();
    // Release resources
    await _engine.release(); 
  }
  // Build the UI to display local and remote videos
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Agora Video Call'),
        ),
        body: Stack(
          children: [
            Center(
              child: _remoteVideo(),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: SizedBox(
                width: 100,
                height: 150,
                child: Center(
                  child: _localUserJoined
                      ? AgoraVideoView(
                          controller: VideoViewController(
                            rtcEngine: _engine,
                            canvas: const VideoCanvas(uid: 0),
                          ),
                        )
                      : const CircularProgressIndicator(),
                ),
              ),
            ),

            _toolbar("")


          ],
        ),
      ),
    );
  }
  // Widget to display remote video
  Widget _remoteVideo() {
    if (_remoteUid != null) {
      return AgoraVideoView(
        controller: VideoViewController.remote(
          rtcEngine: _engine,
          canvas: VideoCanvas(uid: _remoteUid),
          connection: RtcConnection(channelId: widget.channel),
        ),
      );
    } else {
      return const Text(
        'Please wait for remote user to join',
        textAlign: TextAlign.center,
      );
    }
  }
}


  void _onCallEnd( controller) {
    // FlutterRingtonePlayer.stop();
    // controller.endCall(call: call);
  }

  void _muteCamera( controller) {
    // controller.cameraOff
    //     ? controller.onCameraOff(false)
    //     : controller.onCameraOff(true);

    // controller.engine!.muteLocalVideoStream(controller.cameraOff);
  }

  void _onToggleMute( controller) {
    // controller.muted ? controller.onMute(false) : controller.onMute(true);
    // controller.engine!.muteLocalAudioStream(controller.muted);
  }

  void _onSwitchCamera( controller) {
    // controller.engine!.switchCamera();
  }


  Widget _toolbar( controller) {
    
    return Container(
      alignment: Alignment.bottomCenter,
      padding: const EdgeInsets.symmetric(vertical: 48),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          RawMaterialButton(
            onPressed: () => _onCallEnd(controller),
            child: Icon(
              Icons.call_end,
              color: Colors.white,
              size: 35.0,
            ),
            shape: CircleBorder(),
            elevation: 2.0,
            fillColor: Colors.redAccent,
            padding: const EdgeInsets.all(15.0),
          ),
          SizedBox(
            height: 32,
          ),
          // SizedBox(
          //   width: Get.width / 1.6,
          //   height: Get.height / 16,
          //   child: RaisedButton(
          //       color: White,
          //       onPressed: () {
          //         Get.bottomSheet(
          //             Container(
          //               color: White,
          //               height: Get.height / 3,
          //             ),
          //             barrierColor: Colors.black12.withOpacity(0.5));
          //       },
          //       child: Row(
          //         mainAxisAlignment: MainAxisAlignment.center,
          //         children: [
          //           Text(
          //             "View Case Details",
          //             style: TextStyle(
          //                 fontSize: 18,
          //                 color: Get.isDarkMode ? White : PrimaryColor),
          //           ),
          //           Icon(Icons.keyboard_arrow_up,
          //               color: Get.isDarkMode ? White : PrimaryColor)
          //         ],
          //       )),
          // ),
          SizedBox(
            height: 32,
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              RawMaterialButton(
                onPressed: () => _onToggleMute(controller),
                child: Icon(
                  // controller.muted 
                  true
                  ? Icons.mic_off : Icons.mic,
                  color: 
                  // controller.muted 
                  true
                  ? Colors.white : Colors.blueAccent,
                  size: 20.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor: 
                // controller.muted 
                true
                
                ? Colors.blueAccent : Colors.white,
                padding: const EdgeInsets.all(12.0),
              ),
              RawMaterialButton(
                onPressed: () => _onSwitchCamera(controller),
                child: Icon(
                  Icons.switch_camera,
                  color: Colors.blueAccent,
                  size: 20.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor: Colors.white,
                padding: const EdgeInsets.all(12.0),
              ),
              RawMaterialButton(
                onPressed: () => _muteCamera(controller),
                child: Icon(
                  // controller.cameraOff
                  true
                      ? Icons.videocam_off
                      : Icons.videocam_rounded,
                  color:
                      // controller.cameraOff
                      true
                       ? Colors.white : Colors.blueAccent,
                  size: 20.0,
                ),
                shape: CircleBorder(),
                elevation: 2.0,
                fillColor:
                    // controller.cameraOff 
                    true
                    ? Colors.blueAccent : Colors.white,
                padding: const EdgeInsets.all(12.0),
              )
            ],
          ),
        ],
      ),
    );
  }

